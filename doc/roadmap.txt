Roadmap
=======

Release v0.6.3
--------------

* Fix support for "/" as path to the alternate root (reported by Christophe GUILLON).

    How to reproduce::

      $ proot -w $PWD / /bin/sh -c 'echo $PWD'

    current output::

      //home/guillon

    expected output::

      /home/guillon

* Ensure the type of the guest binding head matches the type of the host one.

    The "find" tool complains about "`/guest/binding/head': Not a
    directory" if the /host/binding/head isn't a directory.  This is
    due to the way this former are created by create_dummy().


Release v0.7
------------

* Rewrite the architecture of the sources:

    main.c
    notice.c
    execve/args.c
    execve/execve.c
    execve/interp.c
    execve/ldso.c
    path/binding.c
    path/canon.c
    path/path.c
    syscall/enter.c
    syscall/exit.c
    syscall/syscall.c
    tracee/info.c
    tracee/mem.c
    tracee/ureg.c

* Add command-line interface to set environment variables.

    Rename push_env() in change_env() and enhance it to support the
    "unset" feature.

* Become compatible with the new version of ptrace.

* Add specific support for LD_* environment variables when using QEMU.

* Why QEMU does pthread cancellation when the target program cancels one of its thread?

    Is it due to the RT signal used in NTPL? (TLPI 693)

* Distinguish the runner mode ``-r/-R`` and QEMU specific modes ``-q/-Q``

* Allow the execution of native programs in QEMU mode

* Search the program in $PATH in non-interactive mode, à la sh

    For instance: ``proot $ROOTFS ls /tmp`` instead of ``proot
    $ROOTFS /bin/ls /tmp``

* Fix the support for symbolic links when asymmetric bindings are in use

    See the commit 2f1276b2 and commit c10e2073 for details.  For
    instance::

      ~$ ./proot -m /:/hostfs /usr/local/slack/slackware-13.1/
      ~$ cd /hostfs/sw # -> /usr/local/sw
      /hostfs/sw$ pwd -L
      /hostfs/sw
      /hostfs/sw$ pwd -P
      bash: ../sysdeps/unix/sysv/linux/getcwd.c:132: __getcwd: Assertion `...' failed.
      proot: pid 19766: terminated with signal 6

    another example::

      $ ./proot -m /proc -m /:/hostfs /usr/local/slack/slackware-13.1/
      /$ cd /hostfs/etc
      /hostfs/etc$ ls -l /proc/self/cwd
      lrwxrwxrwx 1 1000 users 0 2011-04-28 17:06 /proc/self/cwd -> /hos

* Add support for coalesced options, for instance ``proot -eM``

* Make ``/proc/self/exe`` point to the original program name

    That was the prupose of the field ``exe`` in the structure
    ``tracee_info``

* Don't canonicalize if the path translation is delayed

    In translate_path(): we don't use the result of the
    canonicalization if the translation is delayed.  This point
    depends actually on the input path, so why I don't detect sooner
    that the canonicalization is useless?


Release v0.8
------------

* Add a "multi-process" mode where there's one fork of PRoot per monitored process.

    Each time a new_tracee structure is created, PRoot forks itself.
    Be sure that the tracer of this new process really is the new
    forked PRoot! (Thanks Yves for this comment)

* Handle /proc/<pid>/(exe|cwd) where <pid> is a process traced by PRoot (i.e not only "self").

* in event_loop(), replace::

      while (get_nb_tracees() > 0) {
          pid = waitpid(-1, &tracee_status, __WALL);
          if (pid < 0)
              notice(ERROR, SYSTEM, "waitpid()");
          ...
      }

  with::

      while (1) {
          pid = waitpid(-1, &tracee_status, __WALL);
          if (pid < 0)
              if (errno != ECHILD)
                  notice(ERROR, SYSTEM, "waitpid()");
              else
                  break;
          ...
      }
      assert(get_nb_tracees() == 0)

* Raise a warning when ptrace(P*K*USER) fails during translate_syscall()

   Instead of silently ignoring this unexpected error.

* Don't accept signal from tracees.

* Add a stealth mode where over-the-stack content is restored.

* Kill all tracees when exiting (on_exit/atexit).

* Fix canonicalization of pathes that are expected to exist but doesn't.

    For instance ``ls /DOESNT_EXIST/../bin`` shouldn't succeed
    (reported by Yves JANIN).

* Fix support for pathes ending with "/." (reported by Yves JANIN)

    For instance:

      proot: translate("/" + "/this/is/a/test/.")
      proot:          -> "/usr/local/slack/install/slackware-13.1-d1/this/is/a/test"


Release v0.9
------------

* Emulate brk for programs that assume it's after the data segment.

    Some heap managers (as found in Bash and Emacs) assume the program
    break is right after *their* data segment but it's not the case
    when the GNU dynamic loader is invoked directly, as in PRoot
    without the -e option::

      +---------------+
      | program code  |
      +---------------+ <- code end [static]
      | program data  |
      +---------------+ <- data end [static]
      :               :
      +---------------+
      | loader code   |
      +---------------+
      | loader data   |
      +---------------+
      | loader heap   |
      +---------------+ <- break [dynamic]

* Be more accurate on reported errno (TLPI 564-565, 572).

* Why doesn't "slackpkg upgrade" work under PRoot v0.3

* Emulate ptrace() so as to allow a ptraced GDB on another ptraced process.


Release v1.0
------------

* Don't exit() on error

* Explain why PRoot does not work with setuid programs

* Fix the feature "attach on-the-fly"

* Check the code coverage of PRoot

* Use Valgrind & Coverity Prevent

* Try Scrashme (syscall fuzzer) against PRoot


Release v1.1
------------

* Add support to fake user/group id, à la "fakeroot".

* Add support to fake the result of the "uname" syscall

* Add support for binfmt_misc-like configuration for runners
  
* Fix support for runners that do execve()

* Write an real ELF loader instead of using the ELF interpreter as a launcher


Release v1.2
------------

* Remove most of string copy.

* Use /proc/<pid>/mem instead of PTRACE_POKEDATA.

* Use one PTRACE_[GS]ETREGS instead of several PTRACE_P*K*USER.

* Don't move the stack pointer, use a pointer in the struct tracee_info

* Use a share memory mapping instead of /proc/<pid>/mem or PTRACE_P*K*DATA.


Release v1.3
------------

* Use a cache for translation results

* Use a hash table to retrieve cached results + tracee's info


Release v2.0
------------

* Make PRoot a multi-job program to avoid sequential syscall handling

* Remove the use of PATH_MAX and ARG_MAX


Not yet scheduled
-----------------

* Replace "readlink(XXX, path, PATH_MAX)" with "readlink(XXX, path, PATH_MAX - 1)"

* get_tracee_string should return -ENAMETOOLONG when length(XXX) >= max_size

* Replace if (XXX != 0) with if (XXX) except when XXX is a function call. 

