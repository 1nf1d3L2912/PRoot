=========
 Roadmap
=========

Short term
==========

* Replace internal implementation of -0 with the use of fakeroot.

* Make `-r $ROOTFS` kinda special `-b $ROOTFS:/`.

* Don't duplicate bindings, use two sets of links (one for the guest
  order, one for the host order).

* For /proc/<pid>/cwd: the detranslation isn't a state machine, hence
  it doesn't know how to detranslate correctly when there are several
  bindings with the same host-side::

    $ proot -w /a -m /tmp:/a -m /tmp:/b ../tests/rootfs /bin/pwd
    /b

    $ proot -w /a -m /tmp:/b -m /tmp:/a ../tests/rootfs /bin/pwd
    /a

* For /proc/<pid>/root: allow one root per tracee, then add support
  for the chroot syscall under PRoot.

* Allow proot-in-proot: tracee { *bindings, ... }.

* Use talloc to implement the new memory model::

                           PRoot
                             |
        ---------------------+---------------------
        |                                         |
        v                (parent link)            v
     tracee 1 <------------------------------- tracee 2
        |                                         |
        +----------> shared ressources <----------+
        |
        +---> private ressources
        |
        +---> temporary ressources
 
  Shared ressources can be:
    * /proc/self/exe (fork)
    * /proc/self/cwd (CLONE_FS)
    * /proc/self/root (CLONE_FS)

  Private ressources can be:
    * /proc/self/exe (execve)
    * /proc/self/cwd (!CLONE_FS)
    * /proc/self/root (!CLONE_FS)

  Temporary ressources are freed at the end of translate_syscall().


Middle term
===========

* Rewrite the way paths are handled in PRoot (branch "opath").

    * Remove the use of PATH_MAX and ARG_MAX

    * Remove most of string copy.

* Add support for a special environment variable to add paths
  dynamically to the host LD_LIBRARY_PATH
  ("EXTRA_HOST_LD_LIBRARY_PATH").

* A host program that launches a guest program shouldn't propagate its
  host LD_LIBRARY_PATH environment variable.


Not yet scheduled
=================

Fixes
-----

* Fix path comparison: /foo and /foo/. are equal.

* Forbid rename/unlink on a mount point:

    $ mv mount_point elsewhere
    mv: cannot move "mount_point" to "elsewhere": Device or resource busy

* Fix the feature "attach on-the-fly"

* Fix support for runners that do execve()

* Add support for the string $ORIGIN (or equivalently ${ORIGIN}) in an rpath specification

* Add support for /etc/ld.so.preload and /etc/ld.so.conf[.d] in mixed-mode.


Features
--------

* Add command-line interface to set environment variables.

    Rename push_env() in change_env() and enhance it to support the
    "unset" feature.

* Distinguish the runner mode ``-r/-R`` and QEMU specific modes ``-q/-Q``

* Add support for coalesced options, for instance ``proot -eM``

* Support guest ELF endianness different from the host one.

* Be more accurate on reported errno (TLPI 564-565, 572).

* Emulate ptrace() so as to allow a ptraced GDB on another ptraced process.

* Emulate get*id() and set*id() accurately when -0 is activated.

* Allow a per-module verbose level

* Emulate getdents in order to glue the "fake" branches with their
  parent directories, c.f. create_missing_components().


Documentation
-------------

* Explain what happens with unknown syscalls when using --allow-unknown-syscalls.

* Explain bindings aren't exclusive, i.e. "-b /tmp:/foo" doesn't invalidate "-b /tmp:/bar".


Clean-up
--------

* Replace "readlink(XXX, path, PATH_MAX)" with "readlink(XXX, path, PATH_MAX - 1)"

* get_tracee_string should return -ENAMETOOLONG when length(XXX) >= max_size

* Add a testcase for each command-line options


Misc.
-----

* Explain why PRoot does not work with setuid programs

* Check (in ld.so sources) if more than one RPATH/RUNPATH entry is allowed.

* Check the code coverage of PRoot


Completeness
------------

* Ensure tracees' clone flags has CLONE_PTRACE & ~CLONE_UNTRACED.

* Add a stealth mode where over-the-stack content is restored.

* Use Valgrind, Coverity Prevent, and AddressSanitizer.

* Try Scrashme (syscall fuzzer) against PRoot


Performance
-----------

* prefetch_mem(): cache write-through memory access (read_string, fetch_args).

* push_array(): use 1 iovec for the array + 1 iovec per item.

* Fallback to /proc/<pid>/mem when process_vm_readv() isn't available.

* Add a "multi-process" mode where there's one fork of PRoot per monitored process.

    Each time a new_tracee structure is created, PRoot forks itself.
    Be sure that the tracer of this new process really is the new
    forked PRoot! (Thanks Yves for this comment)

* Use a cache for translation results

* Use a hash table to retrieve cached results + tracee's info
